<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="/styles/layout.css" />
  <link rel="stylesheet" href="/styles/navbar.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <style>
        .map-and-button-container {
          margin-bottom: 20px; /* Space between map-button groups */
        }

        .map-container {
          width: 400px;
          height: 400px;
          margin: auto; /* Center the map */
        }

        .like-button, .edit-button {
          justify-content: center;
          padding: 10px 20px;
          background-color: lightgray; /* Example button color */
          color: darkslategrey;
          border-color: darkslategrey;
          border-radius: 3px;
          cursor: pointer;
        }
    </style>
</head>
<header>
  <%- include('partials/_navbar') %>
</header>
<body>
    <!-- Container for Existing Maps -->
    <div id="maps-container"></div>
    <script>
      // Get the mapsWithPoints data from the server
      const mapsWithPoints = <%- JSON.stringify(mapsWithPoints) %>;

      // Function to create and render maps with padding
      function createMaps() {
        var mapsContainer = document.getElementById('maps-container');
        const userId = <%- JSON.stringify(userId) %>; // Get the user_id from the cookies

        mapsWithPoints.forEach(function (mapData, index) {
          // Create a container div for each map and its like button
          var containerDiv = document.createElement('div');
          containerDiv.className = 'map-and-button-container';
          mapsContainer.appendChild(containerDiv);

          // Create a button for the map title
          var titleButton = document.createElement('button');
          titleButton.textContent = mapData.title;
          titleButton.className = 'map-title-button';
          containerDiv.appendChild(titleButton);

          // Add an event listener to the title button
          titleButton.addEventListener('click', function() {
              // Redirect to the route for displaying a single map
              window.location.href = '/api/maps/' + mapData.id;
          });

          // Create a description div and display the description
          var descriptionDiv = document.createElement('div');
          descriptionDiv.textContent = mapData.description;
          containerDiv.appendChild(descriptionDiv);

          // Create a map container div
          var mapDiv = document.createElement('div');
          mapDiv.className = 'map-container';
          mapDiv.id = 'map-' + index;
          containerDiv.appendChild(mapDiv); // Append to the containerDiv instead of mapsContainer

          // Create the map
          var map = L.map('map-' + index).setView([mapData.latitude, mapData.longitude], 14);
          L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {}).addTo(map);
          mapData.markers.forEach(function (marker) {
            L.marker([marker.latitude, marker.longitude]).addTo(map);
            mapData.markers.forEach(function (marker) {
              var markerInstance = L.marker([marker.latitude, marker.longitude]).addTo(map);

              var popupContent = '<div id="pointInfo">' +
              '<h3>' + marker.title + '</h3>' +
              '<p>' + marker.body + '</p>' +
              '<img src="' + marker.image_url + '" alt="Marker Image">' +
              '</div>';

              markerInstance.bindPopup(popupContent);

              markerInstance.on('click', function (e) {
                L.DomEvent.stopPropagation(e);
                $('#pointTitle').val(marker.title);
                $('#pointBody').val(marker.description);
                $('#pointImageURL').val(marker.image_url);
              });


            });
          });
      var group = new L.featureGroup(mapData.markers.map(marker => L.marker([marker.latitude, marker.longitude])));
      map.fitBounds(group.getBounds().pad(0.2));

      if (userId) {
            // Create and append the edit button for this map
            var editButton = document.createElement('button');
            editButton.className = 'edit-button';
            editButton.textContent = 'Edit';
            containerDiv.appendChild(editButton); // Append the button to containerDiv

            // event listener for edit button
            editButton.addEventListener('click', function() {
              // Redirect to the route for editing the map
              window.location.href = '/api/maps/edit/' + mapData.id;
            });

            // Create and append the like button for this map
            var likeButton = document.createElement('button');
            likeButton.className = 'like-button';
            likeButton.textContent = 'Like';
            containerDiv.appendChild(likeButton); // Append the button to containerDiv

            // event listener for like button
            likeButton.addEventListener('click', function() {
              fetch('/api/maps/like/' + mapData.id, {
                method: 'POST'
              });
            });
          }
        });
      }

      // Call the function to create and render existing maps with padding
      createMaps(mapsWithPoints);
    </script>
</body>
</html>
